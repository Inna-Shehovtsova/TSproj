{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://ts-h/./src/Game.ts","webpack://ts-h/./src/GameField.ts","webpack://ts-h/./src/GameView.ts","webpack://ts-h/./src/index.ts"],"sourcesContent":["import { GameField, IGameField } from \"./GameField\";\nimport { GameView, IGameView } from \"./GameView\";\nimport { Cell } from \"./types/Cell\";\n\nexport interface IGame {\n\n}\nexport class Game implements IGame{\n    field:IGameField;\n    view:IGameView;\n    stepDurationMs:number;\n    state:Cell[][];\n    maxGenerations:number;\n    timerId:any;\n    constructor(field:IGameField, view:IGameView, dur:number=5){\n        this.field = field;\n        this.view = view;\n        this.stepDurationMs = dur;\n        this.maxGenerations = 1000;\n        this.timerId = undefined;\n        this.view.onFieldSizeChange((width, height)=>{\n            this.field.setSize(width, height)\n            this.state = field.getState();   \n            //console.log('updateGameField size', this.state);\n            this.view.updateGameState({width:width, height: height});\n            this.view.updateGameField(this.state);\n            //console.log('after updateGameField size', this.state);\n        });  \n     \n        this.view.onCellClick((x,y)=>{\n            this.field.toggleCellState(x,y);  \n            this.state = field.getState(); \n            console.log('updateGameField cellclick', this.state);  \n            this.view.updateGameField(this.state);      \n        });\n        \n        this.view.onGameStateChange((isPlay)=>{\n            this.view.updateGameState({isRunning: isPlay});    \n           \n            let i = 1;\n            //console.log(\"dur\", this.stepDurationMs);\n           //console.log(\"state\", isPlay);\n            if(isPlay){\n                //console.log(\"n gen \", i++)\n                this.field.nextGeneration();\n                this.state = this.field.getState();\n                this.view.updateGameField(this.state);\n                \n                this.timerId = setInterval(()=>{\n                    //console.log(\"n gen \", i++)\n                    this.field.nextGeneration();\n                    this.state=this.field.getState();\n                    this.view.updateGameField(this.state);\n                    },\n                     this.stepDurationMs);\n                    \n            }\n            else{\n                //console.log(\"clearInterval\", this.timerId);\n                clearInterval(this.timerId);\n                this.state = this.field.getState();\n                this.view.updateGameField(this.state);\n            }\n        });\n        this.state = field.getState();\n        \n        this.view.updateGameState({\n            isRunning: false,\n            width: this.state[0].length,\n            height: this.state.length\n          });\n        //console.log('updateGameField initial', this.state);\n        this.view.updateGameField(this.state);\n    \n\n    }\n}","import { Cell } from \"./types/Cell\";\n\nexport interface IGameField {\n  getState(): Cell[][];\n  toggleCellState(x: number, y: number):any;\n  nextGeneration():any;\n  setSize(width: number, height: number):any;\n}\n\nexport class GameField implements IGameField{\n    state:Cell[][];\n    nextState:Cell[][];\n\n    makeField(width:number = 0, height:number = 0):Cell[][]{\n        let outer = new Array(height);\n        for(let i:number = 0; i< height; i++){\n            let inner = new Array(width);\n            inner.fill(0);\n            outer[i] = inner;\n        }\n        if(width==0 && height==0)\n            outer = [[]];\n        return outer;\n    }\n    constructor(width:number = 0, height:number = 0){\n        this.state = this.makeField(width, height);\n        this.nextState = this.makeField(width, height);\n    }\n    getState(): Cell[][]{\n        \n        return this.state;\n    };\n    toggleCellState(x: number, y: number):void{\n        //console.log(\"toggle x \", x, \" y \", y, \" state \", this.state[y][x],\" all \",  this.state) ;\n        this.state[y][x] = this.state[y][x]?0:1;\n        //console.log(\"end toggle x \", x, \" y \", y, \" state \", this.state[y][x],\" all \",  this.state) ;\n    };\n    needChange(x:number, y:number, newNeed:boolean = false):boolean{\n        let i_init:number =Math.max(x-1, 0);\n        let j_init:number =Math.max(y-1, 0);\n        let maxX:number = Math.min(this.state.length, x+2);\n        let maxY:number = Math.min(this.state[x].length, y+2);\n        //console.log(\"needChange i\", i_init, \" j \", j_init, \" mX \", maxX, \" my \", maxY, ' x ', x, ' y ', y);\n        let sum:number = 0;\n        for(let i = i_init; i<maxX; ++i){\n            for(let j = j_init;j<maxY; ++j){\n                sum += this.state[i][j];\n            }            \n        }        \n        let needChange:boolean = false;\n        if(newNeed )\n            {if (this.state[x][y]==0)\n            needChange =  sum ===3;}\n        else{\n           if(this.state[x][y]==1){\n                needChange = (sum <3 || sum >4);\n            }\n        }\n       \n        //console.log(\"needChange sum \", sum, \" change \", needChange);\n        return needChange;\n    }\n    nextGeneration():any{\n        let GrowNew = true;\n        for(let i:number = 0; i<this.state.length; i++){\n            for (let j:number = 0; j< this.state[i].length; j++){\n                if(this.needChange(i,j, GrowNew)){\n                    this.toggleCellState(j, i);\n                }\n            }\n        }\n        for(let i:number = 0; i<this.state.length; i++){\n            for (let j:number = 0; j< this.state[i].length; j++){\n                if(this.needChange(i,j)){\n                    this.toggleCellState(j, i);\n                }\n            }\n        }\n    }\n\n    setSize(width: number, height: number):void{\n        let nState:Cell[][] = this.makeField(width, height);\n       \n        for(let i:number = 0; i< Math.min(this.state.length, height); i++){\n            for (let j:number = 0; j<Math.min(this.state[i].length, width); j++){\n                    nState[i][j]=this.state[i][j];\n            }\n        }\n        this.state = nState;\n    };\n}","import { Cell } from \"./types/Cell\";\n\nexport interface IGameView {\n  updateGameField(field: Cell[][]):void;\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n  }):void;\n  onCellClick(cb: (x: number, y: number) => void):void;\n  onGameStateChange(cb: (newState: boolean) => void):void;\n  onFieldSizeChange(cb: (width: number, height: number) => void):void;\n}\ntype State = {\n  width:number,\n  height:number,\n  isRunning:boolean\n}\n\nexport class GameView implements IGameView {\n  rootEl:HTMLElement;\n\n  cssAlive:string;\n  cssDead:string;\n  cssCell:string;\n  cssBRun:string;\n  cssBStop:string;\n  bTextRun:string;\n  bTextStop:string;\n\n  state:State;\n  cbFn:Map<string, Set<Function>>;\n  \n\n \n  updateGameField(field: Cell[][]):void{\n    console.log('!!!!updateGameField inner ', field );\n    if((this.state.height != field.length) || (this.state.width != field[0].length)){\n      console.log('updateGameField .updateGameState', field[0].length, field.length);\n      this.updateGameState({width:field[0].length ,height:field.length});\n    }\n    for(let i =0; i< this.state.height; i++){      \n      for (let j = 0; j< this.state.width; j++){        \n        let cell = this.rootEl.querySelector(`.pos${i}_${j}`);\n        if(field[i][j]){\n          cell?.classList.remove(this.cssDead);\n          cell?.classList.add(this.cssAlive);\n        }\n        else{\n          cell?.classList.remove(this.cssAlive);\n          cell?.classList.add(this.cssDead);\n        }        \n      }  \n    }\n  }\n\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n  }):void{\n    console.log('updateGameState ', state );\n    state.width??=this.state.width;\n    state.height??=this.state.height;\n    if((state.width != this.state.width)\n    || (state.width != this.state.height)){      \n      this.cbFn.get(\"onFieldSizeChange\")?.forEach((v1, v2,set)=>{v1(state.width, state.height)});\n    }    \n    state.isRunning??=this.state.isRunning;\n    if(state.isRunning != this.state.isRunning)\n      this.cbFn.get(\"onGameStateChange\")?.forEach((v1, v2,set)=>{v1(state.isRunning)});    \n  }\n \n  onCellClick(cb: (x: number, y: number) => void):void{       \n    let f = this.cbFn.get(\"onCellClick\");\n    if(!f)\n      f  = new Set();\n    f.add(cb);\n    this.cbFn.set(\"onCellClick\", f);\n  }\n  onGameStateChange(cb: (newState: boolean) => void):void{\n    let f = this.cbFn.get(\"onGameStateChange\");\n    if(!f)\n      f  = new Set();\n    f.add(cb);\n    this.cbFn.set(\"onGameStateChange\", f);\n  }\n  onFieldSizeChange(cb: (width: number, height: number) => void):void{\n    \n    let f = this.cbFn.get(\"onFieldSizeChange\");\n    if(!f)\n      f  = new Set();\n    f.add(cb);\n    this.cbFn.set(\"onFieldSizeChange\", f);\n  }\n /* clickPlay(){ \n    let w = Number(\n      (this.rootEl.querySelector(\n        \"input[type='number'].field-size.field-size--width\"\n      ) as HTMLInputElement).value\n    );\n    let h = Number( (this.rootEl.querySelector(\n        \"input[type='number'].field-size.field-size--height\" \n      ) as HTMLInputElement).value\n      );\n    console.log(' clickPlay() update call');\n    this.updateGameState({width:w, height:h, isRunning:!this.state});\n  }*/\n  constructor( el: HTMLElement){\n    this.rootEl = el;  \n    this.cssAlive = \"cell--alive\";\n    this.cssDead = \"cell--dead\";\n    this.cssCell =\"cell\" ;\n    this.cssBRun = 'run-button--stopped';\n    this.cssBStop = 'run-button--runned';\n    this.bTextRun= 'Play';\n    this.bTextStop= 'Stop';\n    this.state = {width:0, height:0, isRunning:false};\n\n    const gameFieldEl = document.createElement('div');\n    gameFieldEl.classList.add(\"gameField\");\n    this.rootEl.insertAdjacentElement(\"afterbegin\", gameFieldEl);\n    const gameControl  = document.createElement('div');\n    gameControl.classList.add(\"gameControls\");\n    gameControl.innerHTML = `<form>\n                    <input type='number' class=\"field-size field-size--width\"></input>\n                    <input type='number' class=\"field-size field-size--height\"></input>\n                    <button type=\"button\" class=\"run-button run-button--stopped\">${this.bTextRun}\n                    </button></form>`;\n   \n    this.rootEl.insertAdjacentElement(\"beforeend\", gameControl);\n    this.rootEl.querySelector(\".run-button\")?.addEventListener(\n      \"click\",\n      (ev)=>{\n        let w = Number(\n          (this.rootEl.querySelector(\n            \"input[type='number'].field-size.field-size--width\"\n          ) as HTMLInputElement).value\n        );\n        let h = Number( (this.rootEl.querySelector(\n            \"input[type='number'].field-size.field-size--height\" \n          ) as HTMLInputElement).value\n          );\n        if(ev.bubbles)\n        this.updateGameState({width:w, height:h, isRunning:!this.state.isRunning});\n      }\n    );\n    //for jest test\n    this.rootEl.querySelector(\".run-button\").innerHTML = `${this.bTextRun}`;\n    this.rootEl.querySelector(\".field-size.field-size--width\")?.addEventListener(\n      \"change\",\n      (ev)=>{if(ev.bubbles){\n        let w = Number(\n          (this.rootEl.querySelector(\n            \"input[type='number'].field-size.field-size--width\"\n          ) as HTMLInputElement).value\n        );\n        let h = Number( (this.rootEl.querySelector(\n            \"input[type='number'].field-size.field-size--height\" \n          ) as HTMLInputElement).value\n          );\n        \n        console.log(\"field-size--width updateGameState\");\n        this.updateGameState({width:w, height:h});}\n      }\n    );\n    this.rootEl.querySelector(\".field-size.field-size--height\")?.addEventListener(\n      \"change\",\n      (ev)=>{if(ev.bubbles){\n        let w = Number(\n          (this.rootEl.querySelector(\n            \"input[type='number'].field-size.field-size--width\"\n          ) as HTMLInputElement).value\n        );\n        let h = Number( (this.rootEl.querySelector(\n            \"input[type='number'].field-size.field-size--height\" \n          ) as HTMLInputElement).value\n          );\n          \n          console.log(\"field-size--height updateGameState\");\n        this.updateGameState({width:w, height:h});}\n      }\n    );\n   \n    this.cbFn = new Map();\n    this.onFieldSizeChange((width:number, height:number)=>{\n      console.log(\"change size state\" , width, height);\n      this.state.width = width;\n      this.state.height = height;\n    });\n    this.onFieldSizeChange((width:number, height:number)=>{\n      console.log(\"change size input values\" , width, height);\n      let w  = this.rootEl.querySelector(\n          \"input[type='number'].field-size.field-size--width\"\n        ) as HTMLInputElement;\n        w.value =String(width);\n      let h =this.rootEl.querySelector(\n          \"input[type='number'].field-size.field-size--height\" \n        ) as HTMLInputElement;\n        h.value = String(height);\n      \n    });\n    this.onFieldSizeChange((width:number, height:number)=>{\n      console.log(\"change size div cell\" , width, height);\n      for(let el of this.rootEl.querySelectorAll(\".cell\")){el.remove();}\n      for(let i =0; i< height; i++){\n        let par:HTMLElement = document.createElement('div');\n        par.classList.add(\"rowcell\");\n        for (let j = 0; j< width; j++){\n          let cell:HTMLElement = document.createElement('div');\n          cell.classList.add(this.cssCell);\n          cell.classList.add(`pos${i}_${j}`);\n          cell.addEventListener(\"click\", ()=>{ \n          this.cbFn.get(\"onCellClick\")?.forEach((v1, v2,set)=>{\n            v1( j, i)});\n        });\n          par.insertAdjacentElement(\"beforeend\", cell);        \n        }\n        this.rootEl.querySelector(\".gameField\")?.insertAdjacentElement(\"beforeend\", par);\n       \n      }\n    }\n   );\n    this.onCellClick((x,y)=>{\n      let cell = this.rootEl.querySelector(`pos${x}_${y}`); \n        if(cell?.classList.contains(this.cssAlive)){\n          cell?.classList.remove(this.cssAlive);\n          cell?.classList.add(this.cssDead);\n        }\n        else{\n          cell?.classList.remove(this.cssDead);\n          cell?.classList.add(this.cssAlive);\n        }\n      });\n\n  this.onGameStateChange((s)=>{this.state.isRunning = s;});\n  this.onGameStateChange((s)=>{\n    let el = this.rootEl.querySelector(\".run-button\");\n    \n    if(el){  \n        \n    if(s){\n      el.classList.remove(this.cssBRun);\n      el.classList.add(this.cssBStop);\n      el.innerHTML = this.bTextStop;      \n      \n    }\n    else{\n      el.classList.remove(this.cssBStop);\n      el.classList.add(this.cssBRun);\n      el.innerHTML = this.bTextRun;      \n    }\n    }});\n    this.updateGameState(this.state);\n\n  }\n}"," import { Game } from \"./Game\";\n import { GameField } from \"./GameField\";\n import { GameView } from \"./GameView\";\n// import \"./style/style.css\";\n\n const el = document.getElementById(\"app\") as HTMLElement;\n\n const gameView = new GameView(el);\n const gameField = new GameField(5, 5);\n new Game(gameField, gameView, 1000);\n"],"names":["Game","_createClass","field","view","_this","dur","arguments","length","undefined","_classCallCheck","this","stepDurationMs","maxGenerations","timerId","onFieldSizeChange","width","height","setSize","state","getState","updateGameState","updateGameField","onCellClick","x","y","toggleCellState","console","log","onGameStateChange","isPlay","isRunning","nextGeneration","setInterval","clearInterval","GameField","makeField","nextState","key","value","outer","Array","i","inner","fill","newNeed","i_init","Math","max","j_init","maxX","min","maxY","sum","j","needChange","nState","gameView","GameView","el","_this$rootEl$querySel","_this$rootEl$querySel2","_this$rootEl$querySel3","rootEl","cssAlive","cssDead","cssCell","cssBRun","cssBStop","bTextRun","bTextStop","gameFieldEl","document","createElement","classList","add","insertAdjacentElement","gameControl","innerHTML","concat","querySelector","addEventListener","ev","w","Number","h","bubbles","cbFn","Map","String","_step","_iterator","_createForOfIteratorHelper","querySelectorAll","s","n","done","remove","err","e","f","_loop","_this$rootEl$querySel4","par","_loop2","cell","_this$cbFn$get","get","forEach","v1","v2","set","contains","_state$width","_state$height","_state$isRunning","_this$cbFn$get3","_this$cbFn$get2","cb","Set","getElementById"],"sourceRoot":""}