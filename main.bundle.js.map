{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://ts-h/./src/Game.ts","webpack://ts-h/./src/GameField.ts","webpack://ts-h/./src/GameView.ts","webpack://ts-h/./src/index.ts"],"sourcesContent":["import { GameField, IGameField } from \"./GameField\";\nimport { GameView, IGameView } from \"./GameView\";\nimport { Cell } from \"./types/Cell\";\n\nexport interface IGame {\n  getGameState(): Cell[][];\n  getGameStep(): number;\n}\nexport class Game implements IGame {\n  field: IGameField;\n  view: IGameView;\n  stepDurationMs: number;\n  state: Cell[][];\n  maxGenerations: number;\n  timerId: NodeJS.Timeout | string | number | undefined;\n  getGameState() {\n    return this.state;\n  }\n  getGameStep() {\n    return this.stepDurationMs;\n  }\n  constructor(field: IGameField, view: IGameView, dur: number = 5) {\n    this.field = field;\n    this.view = view;\n    this.stepDurationMs = dur;\n    this.maxGenerations = 1000;\n    this.timerId = undefined;\n    this.view.onFieldSizeChange((width, height) => {\n      this.field.setSize(width, height);\n      this.state = field.getState();\n      //console.log('updateGameField size', this.state);\n      this.view.updateGameState({ width: width, height: height });\n      this.view.updateGameField(this.state);\n      //console.log('after updateGameField size', this.state);\n    });\n\n    this.view.onCellClick((x, y) => {\n      this.field.toggleCellState(x, y);\n      this.state = field.getState();\n      console.log(\"updateGameField cellclick\", this.state);\n      this.view.updateGameField(this.state);\n    });\n\n    this.view.onGameStateChange((isPlay) => {\n      this.view.updateGameState({ isRunning: isPlay });\n      if (isPlay) {\n        this.field.nextGeneration();\n        this.state = this.field.getState();\n        this.view.updateGameField(this.state);\n\n        this.timerId = setInterval(() => {\n          this.field.nextGeneration();\n          this.state = this.field.getState();\n          this.view.updateGameField(this.state);\n        }, this.stepDurationMs);\n      } else {\n        clearInterval(this.timerId);\n        this.state = this.field.getState();\n        this.view.updateGameField(this.state);\n      }\n    });\n    this.state = field.getState();\n\n    this.view.updateGameState({\n      isRunning: false,\n      width: this.state[0].length,\n      height: this.state.length,\n    });\n\n    this.view.updateGameField(this.state);\n  }\n}\n","import { Cell } from \"./types/Cell\";\n\nexport interface IGameField {\n  getState(): Cell[][];\n  toggleCellState(x: number, y: number): void;\n  nextGeneration(): void;\n  setSize(width: number, height: number): void;\n}\n\nexport class GameField implements IGameField {\n  state: Cell[][];\n  nextState: Cell[][];\n\n  makeField(width: number = 0, height: number = 0): Cell[][] {\n    let outer = new Array(height);\n    for (let i: number = 0; i < height; i++) {\n      const inner = new Array(width);\n      inner.fill(0);\n      outer[i] = inner;\n    }\n    if (width == 0 && height == 0) outer = [[]];\n    return outer;\n  }\n  constructor(width: number = 0, height: number = 0) {\n    this.state = this.makeField(width, height);\n    this.nextState = this.makeField(width, height);\n  }\n  getState(): Cell[][] {\n    return this.state;\n  }\n  toggleCellState(x: number, y: number): void {\n    //console.log(\"toggle x \", x, \" y \", y, \" state \", this.state[y][x],\" all \",  this.state) ;\n    this.state[y][x] = this.state[y][x] ? 0 : 1;\n    //console.log(\"end toggle x \", x, \" y \", y, \" state \", this.state[y][x],\" all \",  this.state) ;\n  }\n  needChange(x: number, y: number, newNeed: boolean = false): boolean {\n    const i_init: number = Math.max(x - 1, 0);\n    const j_init: number = Math.max(y - 1, 0);\n    const maxX: number = Math.min(this.state.length, x + 2);\n    const maxY: number = Math.min(this.state[x].length, y + 2);\n    //console.log(\"needChange i\", i_init, \" j \", j_init, \" mX \", maxX, \" my \", maxY, ' x ', x, ' y ', y);\n    let sum: number = 0;\n    for (let i = i_init; i < maxX; ++i) {\n      for (let j = j_init; j < maxY; ++j) {\n        sum += this.state[i][j];\n      }\n    }\n    let needChange: boolean = false;\n    if (newNeed) {\n      if (this.state[x][y] == 0) needChange = sum === 3;\n    } else {\n      if (this.state[x][y] == 1) {\n        needChange = sum < 3 || sum > 4;\n      }\n    }\n\n    //console.log(\"needChange sum \", sum, \" change \", needChange);\n    return needChange;\n  }\n  nextGeneration(): void {\n    const GrowNew = true;\n    for (let i: number = 0; i < this.state.length; i++) {\n      for (let j: number = 0; j < this.state[i].length; j++) {\n        if (this.needChange(i, j, GrowNew)) {\n          this.toggleCellState(j, i);\n        }\n      }\n    }\n    for (let i: number = 0; i < this.state.length; i++) {\n      for (let j: number = 0; j < this.state[i].length; j++) {\n        if (this.needChange(i, j)) {\n          this.toggleCellState(j, i);\n        }\n      }\n    }\n  }\n\n  setSize(width: number, height: number): void {\n    const nState: Cell[][] = this.makeField(width, height);\n\n    for (let i: number = 0; i < Math.min(this.state.length, height); i++) {\n      for (let j: number = 0; j < Math.min(this.state[i].length, width); j++) {\n        nState[i][j] = this.state[i][j];\n      }\n    }\n    this.state = nState;\n  }\n}\n","import { Cell } from \"./types/Cell\";\n\nexport interface IGameView {\n  updateGameField(field: Cell[][]): void;\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n  }): void;\n  onCellClick(cb: (x: number, y: number) => void): void;\n  onGameStateChange(cb: (newState: boolean) => void): void;\n  onFieldSizeChange(cb: (width: number, height: number) => void): void;\n}\ntype State = {\n  width: number;\n  height: number;\n  isRunning: boolean;\n};\n\nexport class GameView implements IGameView {\n  rootEl: HTMLElement;\n\n  cssAlive: string;\n  cssDead: string;\n  cssCell: string;\n  cssBRun: string;\n  cssBStop: string;\n  bTextRun: string;\n  bTextStop: string;\n\n  state: State;\n  cbFn: Map<string, Set<Function>>;\n\n  updateGameField(field: Cell[][]): void {\n    console.log(\"!!!!updateGameField inner \", field);\n    if (\n      this.state.height != field.length ||\n      this.state.width != field[0].length\n    ) {\n      console.log(\n        \"updateGameField .updateGameState\",\n        field[0].length,\n        field.length,\n      );\n      this.updateGameState({ width: field[0].length, height: field.length });\n    }\n    for (let i = 0; i < this.state.height; i++) {\n      for (let j = 0; j < this.state.width; j++) {\n        const cell = this.rootEl.querySelector(`.pos${i}_${j}`);\n        if (field[i][j]) {\n          cell?.classList.remove(this.cssDead);\n          cell?.classList.add(this.cssAlive);\n        } else {\n          cell?.classList.remove(this.cssAlive);\n          cell?.classList.add(this.cssDead);\n        }\n      }\n    }\n  }\n\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    isRunning?: boolean;\n  }): void {\n    console.log(\"updateGameState \", state);\n    state.width ??= this.state.width;\n    state.height ??= this.state.height;\n    if (state.width != this.state.width || state.width != this.state.height) {\n      this.cbFn.get(\"onFieldSizeChange\")?.forEach((v1, v2, set) => {\n        v1(state.width, state.height);\n      });\n    }\n    state.isRunning ??= this.state.isRunning;\n    if (state.isRunning != this.state.isRunning)\n      this.cbFn.get(\"onGameStateChange\")?.forEach((v1, v2, set) => {\n        v1(state.isRunning);\n      });\n  }\n\n  onCellClick(cb: (x: number, y: number) => void): void {\n    let f = this.cbFn.get(\"onCellClick\");\n    if (!f) f = new Set();\n    f.add(cb);\n    this.cbFn.set(\"onCellClick\", f);\n  }\n  onGameStateChange(cb: (newState: boolean) => void): void {\n    let f = this.cbFn.get(\"onGameStateChange\");\n    if (!f) f = new Set();\n    f.add(cb);\n    this.cbFn.set(\"onGameStateChange\", f);\n  }\n  onFieldSizeChange(cb: (width: number, height: number) => void): void {\n    let f = this.cbFn.get(\"onFieldSizeChange\");\n    if (!f) f = new Set();\n    f.add(cb);\n    this.cbFn.set(\"onFieldSizeChange\", f);\n  }\n  /* clickPlay(){ \n    let w = Number(\n      (this.rootEl.querySelector(\n        \"input[type='number'].field-size.field-size--width\"\n      ) as HTMLInputElement).value\n    );\n    let h = Number( (this.rootEl.querySelector(\n        \"input[type='number'].field-size.field-size--height\" \n      ) as HTMLInputElement).value\n      );\n    console.log(' clickPlay() update call');\n    this.updateGameState({width:w, height:h, isRunning:!this.state});\n  }*/\n  constructor(el: HTMLElement) {\n    this.rootEl = el;\n    this.cssAlive = \"cell--alive\";\n    this.cssDead = \"cell--dead\";\n    this.cssCell = \"cell\";\n    this.cssBRun = \"run-button--stopped\";\n    this.cssBStop = \"run-button--runned\";\n    this.bTextRun = \"Play\";\n    this.bTextStop = \"Stop\";\n    this.state = { width: 0, height: 0, isRunning: false };\n\n    const gameFieldEl = document.createElement(\"div\");\n    gameFieldEl.classList.add(\"gameField\");\n    this.rootEl.insertAdjacentElement(\"afterbegin\", gameFieldEl);\n    const gameControl = document.createElement(\"div\");\n    gameControl.classList.add(\"gameControls\");\n    gameControl.innerHTML = `<form>\n                    <input type='number' class=\"field-size field-size--width\"></input>\n                    <input type='number' class=\"field-size field-size--height\"></input>\n                    <button type=\"button\" class=\"run-button run-button--stopped\">${this.bTextRun}\n                    </button></form>`;\n\n    this.rootEl.insertAdjacentElement(\"beforeend\", gameControl);\n    this.rootEl\n      .querySelector(\".run-button\")\n      ?.addEventListener(\"click\", (ev) => {\n        const w = Number(\n          (\n            this.rootEl.querySelector(\n              \"input[type='number'].field-size.field-size--width\",\n            ) as HTMLInputElement\n          ).value,\n        );\n        const h = Number(\n          (\n            this.rootEl.querySelector(\n              \"input[type='number'].field-size.field-size--height\",\n            ) as HTMLInputElement\n          ).value,\n        );\n        if (ev.bubbles)\n          this.updateGameState({\n            width: w,\n            height: h,\n            isRunning: !this.state.isRunning,\n          });\n      });\n    //for jest test\n    this.rootEl.querySelector(\".run-button\").innerHTML = `${this.bTextRun}`;\n    this.rootEl\n      .querySelector(\".field-size.field-size--width\")\n      ?.addEventListener(\"change\", (ev) => {\n        if (ev.bubbles) {\n          const w = Number(\n            (\n              this.rootEl.querySelector(\n                \"input[type='number'].field-size.field-size--width\",\n              ) as HTMLInputElement\n            ).value,\n          );\n          const h = Number(\n            (\n              this.rootEl.querySelector(\n                \"input[type='number'].field-size.field-size--height\",\n              ) as HTMLInputElement\n            ).value,\n          );\n\n          console.log(\"field-size--width updateGameState\");\n          this.updateGameState({ width: w, height: h });\n        }\n      });\n    this.rootEl\n      .querySelector(\".field-size.field-size--height\")\n      ?.addEventListener(\"change\", (ev) => {\n        if (ev.bubbles) {\n          const w = Number(\n            (\n              this.rootEl.querySelector(\n                \"input[type='number'].field-size.field-size--width\",\n              ) as HTMLInputElement\n            ).value,\n          );\n          const h = Number(\n            (\n              this.rootEl.querySelector(\n                \"input[type='number'].field-size.field-size--height\",\n              ) as HTMLInputElement\n            ).value,\n          );\n\n          console.log(\"field-size--height updateGameState\");\n          this.updateGameState({ width: w, height: h });\n        }\n      });\n\n    this.cbFn = new Map();\n    this.onFieldSizeChange((width: number, height: number) => {\n      console.log(\"change size state\", width, height);\n      this.state.width = width;\n      this.state.height = height;\n    });\n    this.onFieldSizeChange((width: number, height: number) => {\n      console.log(\"change size input values\", width, height);\n      const w = this.rootEl.querySelector(\n        \"input[type='number'].field-size.field-size--width\",\n      ) as HTMLInputElement;\n      w.value = String(width);\n      const h = this.rootEl.querySelector(\n        \"input[type='number'].field-size.field-size--height\",\n      ) as HTMLInputElement;\n      h.value = String(height);\n    });\n    this.onFieldSizeChange((width: number, height: number) => {\n      console.log(\"change size div cell\", width, height);\n      for (const el of this.rootEl.querySelectorAll(\".cell\")) {\n        el.remove();\n      }\n      for (let i = 0; i < height; i++) {\n        const par: HTMLElement = document.createElement(\"div\");\n        par.classList.add(\"rowcell\");\n        for (let j = 0; j < width; j++) {\n          const cell: HTMLElement = document.createElement(\"div\");\n          cell.classList.add(this.cssCell);\n          cell.classList.add(`pos${i}_${j}`);\n          cell.addEventListener(\"click\", () => {\n            this.cbFn.get(\"onCellClick\")?.forEach((v1, v2, set) => {\n              v1(j, i);\n            });\n          });\n          par.insertAdjacentElement(\"beforeend\", cell);\n        }\n        this.rootEl\n          .querySelector(\".gameField\")\n          ?.insertAdjacentElement(\"beforeend\", par);\n      }\n    });\n    this.onCellClick((x, y) => {\n      const cell = this.rootEl.querySelector(`pos${x}_${y}`);\n      if (cell?.classList.contains(this.cssAlive)) {\n        cell?.classList.remove(this.cssAlive);\n        cell?.classList.add(this.cssDead);\n      } else {\n        cell?.classList.remove(this.cssDead);\n        cell?.classList.add(this.cssAlive);\n      }\n    });\n\n    this.onGameStateChange((s) => {\n      this.state.isRunning = s;\n    });\n    this.onGameStateChange((s) => {\n      const el = this.rootEl.querySelector(\".run-button\");\n\n      if (el) {\n        if (s) {\n          el.classList.remove(this.cssBRun);\n          el.classList.add(this.cssBStop);\n          el.innerHTML = this.bTextStop;\n        } else {\n          el.classList.remove(this.cssBStop);\n          el.classList.add(this.cssBRun);\n          el.innerHTML = this.bTextRun;\n        }\n      }\n    });\n    this.updateGameState(this.state);\n  }\n}\n","import { Game } from \"./Game\";\nimport { GameField } from \"./GameField\";\nimport { GameView } from \"./GameView\";\n// import \"./style/style.css\";\n\nconst el = document.getElementById(\"app\") as HTMLElement;\n\nconst gameView = new GameView(el);\nconst gameField = new GameField(5, 5);\nnew Game(gameField, gameView, 1000);\n"],"names":["Game","field","view","_this","dur","arguments","length","undefined","_classCallCheck","this","stepDurationMs","maxGenerations","timerId","onFieldSizeChange","width","height","setSize","state","getState","updateGameState","updateGameField","onCellClick","x","y","toggleCellState","console","log","onGameStateChange","isPlay","isRunning","nextGeneration","setInterval","clearInterval","key","value","GameField","makeField","nextState","outer","Array","i","inner","fill","newNeed","i_init","Math","max","j_init","maxX","min","maxY","sum","j","needChange","nState","gameView","GameView","el","_this$rootEl$querySel","_this$rootEl$querySel2","_this$rootEl$querySel3","rootEl","cssAlive","cssDead","cssCell","cssBRun","cssBStop","bTextRun","bTextStop","gameFieldEl","document","createElement","classList","add","insertAdjacentElement","gameControl","innerHTML","concat","querySelector","addEventListener","ev","w","Number","h","bubbles","cbFn","Map","String","_step","_iterator","_createForOfIteratorHelper","querySelectorAll","s","n","done","remove","err","e","f","_loop","_this$rootEl$querySel4","par","_loop2","cell","_this$cbFn$get","get","forEach","v1","v2","set","contains","_state$width","_state$height","_state$isRunning","_this$cbFn$get3","_this$cbFn$get2","cb","Set","getElementById"],"sourceRoot":""}